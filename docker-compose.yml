version: '3.8'

services:

  cms:
    image: wordpress:latest
    container_name: cms
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
    volumes:
      - ./wp_data:/var/www/html
    depends_on:
      - db
    networks:
      monitoring:
        ipv4_address: 172.19.0.10
# MySQL for Zabbix and WordPress
  db:
    image: mysql:5.7
    container_name: db
    platform: linux/amd64
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wordpress  # Default to WordPress database
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
    volumes:
      - db_data:/var/lib/mysql
    networks:
      monitoring:
        ipv4_address: 172.19.0.11
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: nginx
    platform: linux/amd64  # Adding platform specifier
    ports:
      - "8080:80"
    volumes:
      - ./nginx_conf:/etc/nginx/conf.d
    networks:
      monitoring:
        ipv4_address: 172.19.0.15
    depends_on:
      - cms

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    platform: linux/amd64  # Adding platform specifier
    volumes:
        - ./GAP-1/prometheus.yml:/etc/prometheus/prometheus.yml
        - ./GAP-1/alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=1w'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      monitoring:
        ipv4_address: 172.19.0.16
    depends_on:
      - viktoria_metrics
    restart: always 

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    platform: linux/amd64  # Adding platform specifier
    volumes:
      - ./GAP-1/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./GAP-1/custom.tmpl:/etc/alertmanager/custom.tmpl
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--log.level=debug'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    env_file:
      - ./.env  # Reference to your environment file
    expose:
      - 9093
    networks:
      monitoring:
        ipv4_address: 172.19.0.17

  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    platform: linux/amd64  # Adding platform specifier
    ports:
      - "9091:9091"
    networks:
      monitoring:
        ipv4_address: 172.19.0.18

  grafana:
    image: grafana/grafana:9.5.15
    container_name: grafana
    platform: linux/amd64  # Adding platform specifier
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - ./grafana_data:/var/lib/grafana  # Grafana data storage
      - ./GAP-1/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./GAP-1/provisioning:/etc/grafana/provisioning  # Mount the entire provisioning directory
    ports:
      - "3000:3000"
    networks:
      monitoring:
        ipv4_address: 172.19.0.19

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    platform: linux/amd64  # Adding platform specifier
    command: --nginx.scrape-uri=http://nginx:80/stub_status
    ports:
      - "9113:9113"
    networks:
      monitoring:
        ipv4_address: 172.19.0.20
    depends_on:
      - nginx

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    platform: linux/amd64  # Force the amd64 platform
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--no-collector.arp'  # Correct way to disable ARP collector
      - '--collector.filesystem.mount-points-exclude="^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($|/)"'
    ports:
      - "9100:9100"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    networks:
      monitoring:
        ipv4_address: 172.19.0.21

  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox_exporter
    platform: linux/amd64  # Adding platform specifier
    ports:
      - 9115:9115
    volumes:
      - ./GAP-1/blackbox.yml:/config/blackbox.yml
    networks:
      monitoring:
        ipv4_address: 172.19.0.22

  mysql_exporter:
    image: prom/mysqld-exporter:v0.12.1
    container_name: mysql_exporter
    platform: linux/amd64  # Adding platform specifier
    environment:
      DATA_SOURCE_NAME: "root:root_password@tcp(db:3306)/"
    ports:
      - "9104:9104"
    networks:
      monitoring:
        ipv4_address: 172.19.0.23
    depends_on:
      db:
        condition: service_healthy

  flask_app:
    build:
      context: ./flask_app  # Directory containing your Dockerfile and app.py
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    networks:
      monitoring:
        ipv4_address: 172.19.0.24
    restart: always
  
  viktoria_metrics:
    image: victoriametrics/victoria-metrics:latest
    container_name: viktoria_metrics
    platform: linux/amd64  # Adding platform specifier
    volumes:
      - ./viktoria_data:/victoria-metrics-data # Persistent data storage
    ports:
      - "8428:8428"
    command: 
      - '-storageDataPath=/victoria-metrics-data'  # Set data storage path
      - '-retentionPeriod=2w'  # Set retention period
      - "--httpListenAddr=:8428"
    networks:
      monitoring:
        ipv4_address: 172.19.0.25
    restart: always

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/24

volumes:
  db_data:
  grafana_data:
  viktoria_data: